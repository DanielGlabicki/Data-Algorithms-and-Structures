Zaimplementuj w języku Python drzewo binarne BST. Niech będzie zaimplementowane za pomocą dwóch klas: pierwsza klasa zawiera pole root wskazujące na korzeń drzewa (ang. root node), druga klasa reprezentuje węzeł drzewa i zawiera cztery pola: klucz, wartość oraz wskaźniki na dwa węzły dzieci (ang. child node) - prawe i lewe rozgałęzienie.

Zaimplementuj poniższe funkcjonalności:
konstruktor - tworzy obiekt reprezentujący drzewo z polem root ustawionym na None
search - wyszukująca i zwracająca wartość odpowiadającą podanemu kluczowi (lub None)
insert - wstawiająca daną wg podanego klucza, jeżeli element o takim kluczu istnieje, jego wartość powinna zostać nadpisana (funkcja pamięta poprzednika, patrz wykład)
delete -  usuwająca daną o podanym kluczu
print - wypisująca zawartość drzewa jako listę elementów ułożonych od najmniejszego do największego klucza wypisanych tak jak pokazano w przykładzie poniżej
height - metoda zwracająca maksymalną wysokość od korzenia do węzła nieposiadającego kolejnych potomków (leaf node)  - najdłuższa ścieżka w drzewie

Funkcja search wykonuje wyszukiwanie elementu w drzewie na podstawie klucza w wersji rekurencyjnej (może to być funkcja, która zawiera tylko wywołanie pomocniczej funkcji rekurencyjnej)
Funkcja insert tworzy kolejne elementy drzewa na podstawie podanego klucza, prawe rozgałęzienie zawiera klucze większe niż klucz w węźle rodzic (parent node), lewe rozgałęzenie zawiera klucze mniejsze niż klucz w węźle rodzic.

Funkcja delete usuwa element drzewa na podstawie podanego klucza. Należy uwzględnić trzy przypadki:
usunięcie węzła, który nie posiada węzłów dzieci (child nodes)
usunięcie węzła z jednym dzieckiem 
usunięcie węzła, który posiada dwa węzły dzieci - usuwany węzeł zastępujemy minimalnym kluczem z prawego poddrzewa (ang. right subtree) - successor node
Funkcja print_tree wypisująca całą strukturę drzewa w formie 2D (UWAGA: tak wypisywane drzewo jest przekręcone o 90 stopni - 'leży na lewym boku'):
    def print_tree(self):
        print("==============")
        self.__print_tree(self.root, 0)
        print("==============")

    def __print_tree(self, node, lvl):
        if node!=None:
            self.__print_tree(node.right, lvl+5)

            print()
            print(lvl*" ", node.key, node.data)
     
            self.__print_tree(node.left, lvl+5)
 

W main-ie sprawdź działanie zaimplementowanego drzewa przez:

utworzenie pustego drzewa BST
dodanie kolejno elementy klucz:wartość -- {50:'A', 15:'B', 62:'C', 5:'D', 20:'E', 58:'F', 91:'G', 3:'H', 8:'I', 37:'J', 60:'K', 24:'L'}, tworząc drzewo o podanej strukturze, jak na rysunku: 


wypisz drzewo 2D (funkcją print_tree)
wyświetl zawartość drzewa jako listę elementów ułożonych od najmniejszego do największego klucza wypisanych w postaci klucz wartość - przykładowo powyższe drzewo powinno być wypisane tak:
3 H,5 D,8 I,15 B,20 E,24 L,37 J,50 A,58 F,60 K,62 C,91 G,

znajdź klucz 24 i wypisz wartość
zaktualizuj wartość "AA" dla klucza 20
dodaj element 6:M
usuń element o kluczu 62
dodaj element 59:N
dodaj element 100:P
usuń element o kluczu 8
usuń element o kluczu 15
wstaw element 55:R
usuń element o kluczu 50
usuń element o kluczu 5
usuń element o kluczu 24
wypisz wysokość drzewa
wyświetl zawartość drzewa jako listę elementów
wyświetl drzewo 2D
Efekt końcowy:

