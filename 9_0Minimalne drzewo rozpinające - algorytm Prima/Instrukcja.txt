1. Wprowadzenie

MST (minimum spanning tree) lub SST (shortest spanning tree) - drzewo rozpinające danego grafu o najmniejszej z możliwych wag, tj. takie, że nie istnieje dla tego grafu inne drzewo rozpinające o mniejszej sumie wag krawędzi.
Drzewo rozpinające - drzewo, które zawiera wszystkie wierzchołki grafu G, zaś zbiór krawędzi drzewa jest podzbiorem zbioru krawędzi grafu G.


2. Cel ćwiczenia:

modyfikacja stworzonej wcześniej struktury danych do reprezentacji grafu,

implementacja algorytmu Prima do znajdowania MST,

zastosowanie metody do segmentacji prostego obrazku,

zadania dodatkowe: implementacja algorytmu Kruskala oraz struktury Union-Find.


3.  Modyfikacja struktury danych

W pierwszym etapie skupimy się na przedstawionym grafie - przykład pochodzi z Wiki (https://en.wikipedia.org/wiki/Minimum_spanning_tree) 

(mst_graph_input)

Na poprzednich zajęciach implementowaliśmy graf w dwóch wariantach - macierzy sąsiedztwa i listy sąsiedztwa. Dla naszych potrzeb lepsze wydaje się użycie listy, gdyż będziemy mieli do czynienia raczej z grafami “rzadkimi” (do takich można zaliczyć obrazki).


Zaczynamy od uzupełnienia naszej klasy o kilka funkcjonalności:

wygodnie jest dodać do każdego wierzchołka informację o jasności/kolorze - będzie to bardzo przydatne przy reprezentowaniu obrazków. Uwaga. Teoretycznie nie jest to konieczne, bo można za każdym razem odwoływać się do wejściowego obrazu, ale takie podejście skomplikowałoby kod. Potrzebne będzie też pobieranie i ustawianie koloru danego wierzchołka.

musimy dodać do struktury informację o wadze danej krawędzi - w bazowej reprezentacji zakładaliśmy, że krawędzi nie towarzyszy żadna informacja.



4. Algorytm Prima

Algorytm Prima jest prosty. Zaczynamy od wybranego wierzchołka, dodajemy go do naszego drzewa, szukamy krawędzi o najmniejszej wadze łączącej wierzchołek z drzewa z wierzchołkiem “poza drzewem”, dodajemy krawędź oraz wierzchołek, do którego prowadzi do drzewa i tak aż nam się skończą wierzchołki.
Bardziej formalnie zapisany algorytm Prim-MST(G):
    Zaczynamy z arbitralnie wybranego wierzchołka s grafu G

    Dopóki (są wierzchołki G nie w drzewie Tprim)

            Wybierz krawędź z najmniejszą wagą pomiędzy wierzchołkiem należącym do drzewa i tym spoza

            Dodaj wybraną krawędź i wierzchołek do drzewa Tprim


Bazowa implementacja (“naiwna”) ma złożoność O(E * V), gdzie E - liczba krawędzi, V - liczba wierzchołków. Wynika to z punktu “wybierz krawędź...”, gdzie za każdym razem przeglądamy wszystkie krawędzie - oczywiście proszę pamiętać, że jest to “górne ograniczenie”.

My zastosujemy nieco bardziej zaawansowany (sprytny) wariant, który charakteryzuje się złożonością O(V2) - za książką The Algorithms Design Manual Steven S. Skiena. 
Ulepszenie polega na przechowywaniu informacji o krawędziach o najmniejszej wadze pomiędzy wierzchołkami z drzewa i nie z drzewa. Warto zauważyć, że takie uaktualnienie jest wykonywane w każdej iteracji tylko dla danego wierzchołka.


Nasza implementacja:

potrzebujemy trzy dodatkowe słowniki indeksowane wierzchołkiem: intree - czy wierzchołek jest w drzewie, distance - minimalna waga krawędzi dla danego wierzchołka, parent - “rodzic”/poprzedni wierzchołek w drzewie (do opisu krawędzi). Rozmiar tych tablic to liczba wierzchołków, a ich początkowe wartości to - intree:  0, distance: duża liczba (np. float('inf')), parent: None.  

UWAGA: jeżeli są Państwo pewni, że klucze w słowniku słowników i w słowniku sąsiadów to te same obiekty (np. dodawanie wierzchołków robili Państwo w insert_edge a nie osobno) to można spróbować zrobić intree, distance i parent nie jako słowniki tylko jako pojedyncze pola klasy opisującej wierzchołek.

potrzebujemy też struktury na nasze drzewo (MST) - proponuję utworzyć pusty graf

startujemy z dowolnego wierzchołka - dodajemy go do grafu MST

całość działa w pętli while wykonywanej dopóki bieżący wierzchołek o indeksie v jest poza drzewem tj. intree[v] == 0 (lub v.intree=0 jeśli intree będzie polem)

zaznaczamy, że wierzchołek jest drzewie tj. v.intree[v]=1 (lub v.intree = 1)

przeglądamy sąsiadów aktualnie rozważanego wierzchołka:

sprawdzamy, czy waga krawędzi jest mniejsza od tej zapisanej w distance oraz czy wierzchołek nie jest już w drzewie,

jeśli warunek jest spełniony, to uaktualniamy  distance dla sąsiada oraz zapamiętujemy parent sąsiada na rozważany wierzchołek,

szukamy kolejnego wierzchołka, który dodamy do drzewa:

musimy wykonać przegląd po wszystkich wierzchołkach (technicznie po tych, które nie są w drzewie),

szukamy takiego, który nie jest w MST oraz ma najmniejszą wartość distance - czyli poszukiwana krawędź o najmniejszej wadze,

dodajemy do drzewa MST krawędź (w zasadzie dwie krawędzie bo tworzymy graf nieskierowany) - tu używamy informacji z parent,

warto też wyznaczyć sumę krawędzi tworzących drzewo - “długość” drzewa rozpinającego.


Weryfikacja:

Wczytujemy graf - dostarczony w pliku graf_mst.py. Uwaga. W odróżnieniu od wcześniej wykorzystywanej “mapy Polski”, tu nie mamy podwójnych krawędzi - zatem trzeba je dodać “ręcznie” tj. wczytujemy kolejne połączenie, np. krotkę (‘A’,’B’,4). Tworzymy wierzchołki ‘A’, ‘B’ oraz dwie krawędzie pomiędzy A->B i B->A obie z wagą 4.
Na rysunku mamy podane MST dla danego grafu. Wystarczy tylko sprawdzić, czy np. lista krawędzi w naszym MST jest identyczna.

Proszę, aby  program w wersji finalnej wypisywał jedynie graf wynikowy z wykorzystaniem poniższej funkcji (używa ona interfejsu podanego na zajęciach z implementacji grafów więc nie powinna wymagać poprawek):
def printGraph(g):
    print("------GRAPH------")
    for v in g.vertices():
        print(v, end = " -> ")
        for (n, w) in g.neighbours(v):
            print(n, w, end=";")
        print()
    print("-------------------")
